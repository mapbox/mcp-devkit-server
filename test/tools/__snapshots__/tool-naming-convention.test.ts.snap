// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Tool Naming Convention > should maintain consistent tool list (snapshot test) 1`] = `
[
  {
    "className": "BoundingBoxTool",
    "description": "Calculates bounding box of given GeoJSON content, returns as [minX, minY, maxX, maxY]",
    "toolName": "bounding_box_tool",
  },
  {
    "className": "CoordinateConversionTool",
    "description": "Converts coordinates between WGS84 (longitude/latitude) and EPSG:3857 (Web Mercator) coordinate systems",
    "toolName": "coordinate_conversion_tool",
  },
  {
    "className": "CountryBoundingBoxTool",
    "description": "Gets bounding box for a country by its ISO 3166-1 country code, returns as [minX, minY, maxX, maxY].",
    "toolName": "country_bounding_box_tool",
  },
  {
    "className": "CreateStyleTool",
    "description": "Create a new Mapbox style",
    "toolName": "create_style_tool",
  },
  {
    "className": "CreateTokenTool",
    "description": "Create a new Mapbox public access token with specified scopes and optional URL restrictions.",
    "toolName": "create_token_tool",
  },
  {
    "className": "DeleteStyleTool",
    "description": "Delete a Mapbox style by ID",
    "toolName": "delete_style_tool",
  },
  {
    "className": "GeojsonPreviewTool",
    "description": "Generate a geojson.io URL to visualize GeoJSON data. Returns only the URL link.",
    "toolName": "geojson_preview_tool",
  },
  {
    "className": "GetMapboxDocSourceTool",
    "description": "Get the latest official Mapbox documentation, APIs, SDKs, and developer resources directly from Mapbox. Always up-to-date, comprehensive coverage of all current Mapbox services including mapping, navigation, search, geocoding, and mobile SDKs. Use this for accurate, official Mapbox information instead of web search.",
    "toolName": "get_latest_mapbox_docs_tool",
  },
  {
    "className": "ListStylesTool",
    "description": "List styles for a Mapbox account. Use limit parameter to avoid large responses (recommended: limit=5-10). Use start parameter for pagination.",
    "toolName": "list_styles_tool",
  },
  {
    "className": "ListTokensTool",
    "description": "List Mapbox access tokens for the authenticated user with optional filtering and pagination. When using pagination, the "start" parameter must be obtained from the "next_start" field of the previous response (it is not a token ID)",
    "toolName": "list_tokens_tool",
  },
  {
    "className": "PreviewStyleTool",
    "description": "Generate preview URL for a Mapbox style using an existing public token",
    "toolName": "preview_style_tool",
  },
  {
    "className": "RetrieveStyleTool",
    "description": "Retrieve a specific Mapbox style by ID",
    "toolName": "retrieve_style_tool",
  },
  {
    "className": "StyleBuilderTool",
    "description": "Generate Mapbox style JSON for creating new styles or updating existing ones. Uses Mapbox Standard for all NEW styles, and preserves the base style type when working with EXISTING styles.

USAGE:
1. Use this tool to generate style JSON configuration
2. For NEW styles: Use the generated JSON with create_style_tool
3. For EXISTING styles: Use portions of the JSON with update_style_tool to modify specific layers

BASE STYLE SELECTION:
• FOR NEW STYLES: ALWAYS use base_style: 'standard' unless user explicitly requests otherwise
  - Standard is the modern, recommended approach with best performance
  - Example: "Create a style showing toll roads" → use 'standard'
  - Example: "Create a dark style showing parks" → use 'standard' with dark theme config

• FOR EXISTING STYLES: Auto-detect and preserve the current base style
  - If working on a Classic style (retrieved via retrieve_style_tool), keep using Classic
  - If working on a Standard style, keep using Standard
  - Look for 'imports' field to identify Standard styles

BASE STYLES:
• standard (DEFAULT FOR NEW STYLES): Modern Mapbox Standard with imports, best performance
• streets/light/dark/satellite/outdoors: Classic styles (use only for existing Classic styles or explicit request)
• blank: Empty style for full customization (only when explicitly needed)

WHEN TO USE EACH BASE STYLE:
• "Create a style showing toll roads" → base_style: 'standard'
• "Create a dark style with parks" → base_style: 'standard' + standard_config: { theme: 'monochrome' }
• "Build a navigation style" → base_style: 'standard'
• "Working on style cmfnxfroh..." (if it's Classic) → preserve its base_style
• "Create a streets-v11 style" (explicit request) → base_style: 'streets'

LAYER ORDERING:
• In ALL styles: Later layers in array render on top of earlier layers
• Standard style: 'slot' determines which section, array order matters within each slot
• Classic/Blank: Array order is the only control for layer stacking
Example: [background, water, roads, labels] = labels render on top

MAPBOX STANDARD - SLOT PROPERTY:
When using Standard base style, each layer needs a 'slot' to control stacking:
• bottom: Below most map features (land, water)
• middle: Between base features and labels
• top: Above all base map features (default for visibility)
Within each slot, array order still applies - later layers render on top

MAPBOX STANDARD - CONFIGURATION:
Standard style provides a rich basemap that can be customized using the standard_config parameter.
These settings control the BASE Standard style features - you can still add custom layers on top!

• Visibility toggles: Control which base features are shown
  - showPlaceLabels, showRoadLabels, showTransitLabels (base labels)
  - showPedestrianRoads, show3dObjects, showAdminBoundaries (base features)
• Theme options: Adjust the overall look of the base style
  - theme: default/faded/monochrome/custom
  - lightPreset: day/night/dawn/dusk
• Color overrides: Change colors of base Standard style elements
  - Roads: colorMotorways, colorTrunks, colorRoads
  - Nature: colorWater, colorGreenspace
  - Labels: colorPlaceLabels, colorRoadLabels, colorPointOfInterestLabels
  - Admin: colorAdminBoundaries
• Density controls: densityPointOfInterestLabels (1-5)

IMPORTANT: These configurations modify the underlying Standard basemap.
Your custom layers (defined in 'layers' parameter) are added ON TOP of this configured basemap.

RESOURCE GUIDE:
The resource://mapbox-style-layers contains comprehensive documentation including:
• All available layer types with descriptions
• Paint and layout properties for each layer type
• Common filters and expressions
• Example configurations

AVAILABLE LAYER TYPES:
• water, waterway - Oceans, lakes, rivers
• landuse - General land use areas
• parks - Parks, cemeteries, golf courses (pre-filtered for class: park|cemetery|golf_course)
• buildings, building_3d - Building footprints and 3D extrusions
• ROAD TYPES (each automatically includes the correct road classes):
  - road - Generic road layer for CUSTOM filtering (use for toll roads, bridges, tunnels, etc.)
  - motorways - Highways/freeways (includes: motorway, trunk)
  - primary_roads - Major arterial roads (includes: primary)
  - secondary_roads - Secondary & tertiary roads (includes: secondary, tertiary)
  - streets - Local/residential streets (includes: street, street_limited, residential, service)
  - paths - Pedestrian paths & walkways (includes: path, pedestrian)
  - railways - Rail lines (includes: major_rail, minor_rail, service_rail)
• country_boundaries, state_boundaries - Administrative borders
• place_labels - City/town/village labels (pre-filtered)
• road_labels - Street name labels
• poi_labels - Points of interest with icons
• landcover - Natural features like forests, grass
• airports - Airport features (runways, terminals)
• transit - Transit stops with icons (bus, subway, rail)

IMPORTANT FOR ROADS:
• Use 'road' layer type for custom filtering (toll roads, bridges, tunnels, bike lanes, etc.)
• Use specific road types (motorways, primary_roads, etc.) for pre-filtered road classes
• Each specific road type automatically includes proper filters and zoom-based width interpolation
• The generic 'road' layer requires filter_properties for filtering

ACTIONS YOU CAN APPLY:
• color - Set the layer's color (roads will use smart defaults if not specified)
• highlight - Make layer prominent with enhanced color/width
• hide - Remove layer from view
• show - Display layer with default styling

EXPRESSION FEATURES:
• Zoom-based styling - "Make roads wider at higher zoom levels"
• Data-driven styling - "Color roads based on their class"
• Property-based filters - "Show only international airports"
• Interpolated values - "Fade buildings in between zoom 14 and 16"

ADVANCED FILTERING:
• "Show only motorways and trunk roads" - Use motorways layer type
• "Display only toll roads" - Use road layer with filter_properties: { toll: true }
• "Display only bridges" - Use road layer with filter_properties: { structure: 'bridge' }
• "Show only tunnels" - Use road layer with filter_properties: { structure: 'tunnel' }
• "Show only paved roads" - Use road layer with filter_properties: { surface: 'paved' }
• "Show roads with bike lanes" - Use road layer with filter_properties: { bike_lane: ['left', 'right', 'both'] }
• "Display only disputed boundaries" - Use filter_properties: { disputed: 'true' }
• "Filter POIs by maki icon type" - Use poi_labels with filter_properties: { maki: 'restaurant' }
• "Show only bus stops" - Use transit layer with filter_properties: { maki: 'bus' }
• "Display subway entrances" - Use transit layer with filter_properties: { maki: 'entrance' }

COMPREHENSIVE EXAMPLES:
• "Color all roads differently":
  - Use motorways (red), primary_roads (orange), secondary_roads (yellow), streets (green), paths (purple)
  - Each layer type automatically includes the correct road classes
• "Show only toll roads" - Use road layer with filter_properties: { toll: true }
• "Show toll motorways" - Use road layer with filter_properties: { toll: true, class: ['motorway', 'trunk'] }
• "Display bridges" - Use road layer with filter_properties: { structure: 'bridge' }
• "Show paved roads" - Use road layer with filter_properties: { surface: 'paved' }
• "Display one-way streets" - Use road layer with filter_properties: { oneway: 'true', class: ['street'] }
• "Show roads with bike lanes" - Use road layer with filter_properties: { bike_lane: ['left', 'right', 'both', 'yes'] }
• "Show all labels" - Use place_labels, road_labels, poi_labels layers
• "Display boundaries" - Use country_boundaries and state_boundaries layers

IMPORTANT FOR ROAD FILTERING:
• The 'toll' property uses 'true' as a string value when present
• Structure values: 'none', 'bridge', 'tunnel', 'ford'
• Surface values: 'paved', 'unpaved'
• Bike lane values: 'left', 'right', 'both', 'yes', 'no'
• Oneway and dual_carriageway use string values: 'true' or 'false'
• Access can be 'restricted' when limitations exist

For detailed layer properties and filters, check resource://mapbox-style-layers

TRANSIT FILTERING EXAMPLE:
To show only bus stops: use layer_type: 'transit' with filter_properties: { maki: 'bus' }
To show multiple transit types: filter_properties: { maki: ['bus', 'entrance', 'rail-metro'] }",
    "toolName": "style_builder_tool",
  },
  {
    "className": "StyleComparisonTool",
    "description": "Generate a comparison URL for comparing two Mapbox styles side-by-side",
    "toolName": "style_comparison_tool",
  },
  {
    "className": "TilequeryTool",
    "description": "Query vector and raster data from Mapbox tilesets at geographic coordinates",
    "toolName": "tilequery_tool",
  },
  {
    "className": "UpdateStyleTool",
    "description": "Update an existing Mapbox style",
    "toolName": "update_style_tool",
  },
]
`;
